version: '3.4'
services:
    php:
        build:
            context: docker/php
        container_name: ${APP_NAME}_php
        restart: unless-stopped
        tty: true
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        depends_on:
            - pgsql
        volumes:
            - ./:/var/www
            - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
        working_dir: /var/www
        networks:
            - network
    nginx:
        image: nginx:alpine
        container_name: ${APP_NAME}_nginx
        restart: unless-stopped
        tty: true
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        volumes:
            - ./:/var/www
            - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
        working_dir: /var/www
        networks:
            - network
    pgsql:
        container_name: ${APP_NAME}_pgsql
        image: postgres
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - 'pgsql-volume:/var/lib/postgresql/data'
        networks:
            - network
    #    mssql:
    #        build:
    #            context: docker/mssql
    #        restart: unless-stopped
    #        container_name: ${APP_NAME}_mssql
    #        user: root
    #        ports:
    #            - '${FORWARD_DB_PORT:-1433}:1433'
    #        environment:
    #            SA_PASSWORD: ${DB_PASSWORD}
    #            ACCEPT_EULA: "Y"
    #        volumes:
    #            - 'mssql-volume:/var/opt/mssql/data'
    #        networks:
    #            - network
    redis:
        image: 'redis:alpine'
        container_name: ${APP_NAME}_redis
        restart: unless-stopped
        volumes:
            - 'redis-volume:/data'
        networks:
            - network
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            retries: 3
            timeout: 5s
    queue:
        build:
            context: ./docker/supervisor/queue
        container_name: ${APP_NAME}_queue
        volumes:
            - ./:/var/www
        networks:
            - network
    scheduler:
        build:
            context: ./docker/supervisor/schedule
        container_name: ${APP_NAME}_scheduler
        volumes:
            - ./:/var/www
        networks:
            - network
    websockets:
        image: 'quay.io/soketi/soketi:latest-16-alpine'
        container_name: ${APP_NAME}_websockets
        environment:
            DEBUG: '1'
            METRICS_SERVER_PORT: '9601'
            METRICS_ENABLED: '1'
            SOKETI_DEFAULT_APP_ID: ${PUSHER_APP_ID}
            SOKETI_DEFAULT_APP_KEY: ${PUSHER_APP_KEY}
            SOKETI_DEFAULT_APP_SECRET: ${PUSHER_APP_SECRET}
        networks:
            - network
networks:
    network:
        driver: bridge
volumes:
    pgsql-volume:
        driver: local
    mssql-volume:
        driver: local
    redis-volume:
        driver: local
